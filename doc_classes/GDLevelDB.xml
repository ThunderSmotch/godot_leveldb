<?xml version="1.0" encoding="UTF-8" ?>
<class name="GDLevelDB" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A LevelDB wrapper for Godot.
	</brief_description>
	<description>
		A LevelDB wrapper for Godot. 
		[b]Note:[/b] In LevelDB, keys and values are arbitrary byte arrays. Thus, one should use [PackedByteArray] for keys and values. Conversion to and from [String] is easy thanks to the buffer methods like [method String.to_ascii_buffer] and [method PackedByteArray.get_string_from_ascii]. As for other types of data, one must handle the encoding/decoding by hand, as seen in the example usage below.
		[b]Example usage:[/b]
		[codeblock]
		var db = GDLevelDB.new()

		func _ready() -&gt; void:
		    # Opening database (creating one if it does not exist)
		    db.open("./demo_db", {"create_if_missing": true})

		    # Saving a string and an integer
		    var a_key: PackedByteArray = "key1".to_ascii_buffer()
		    var other_key: PackedByteArray = "key2".to_ascii_buffer()

		    var string: String = "value"

		    var i: int = 1000
		    var bytes: PackedByteArray
		    bytes.resize(8) # 8 bytes = 64 bits, enough for an int
		    bytes.encode_s64(0, i)

		    db.put(a_key, string.to_ascii_buffer())
		    db.put(other_key, bytes)

		    # Print all the keys in this database assuming they were strings
		    var keys = db.keys()
		    for key in keys:
		        db.print(key)

		    # Print the string
		    db.print(db.get(a_key))

		    # Grab signed 64-bit int value
		    print(db.get(other_key).decode_s64(0))

		    # Deleting a key/value pair
		    db.delete(a_key)

		    # Close the database
		    db.close()
		[/codeblock]
	</description>
	<tutorials>
		<link title="GitHub Repository">https://github.com/ThunderSmotch/godot_leveldb/</link>
	</tutorials>
	<methods>
		<method name="close">
			<return type="bool" />
			<description>
				Closes a previously opened database. See [method open].
			</description>
		</method>
		<method name="delete">
			<return type="bool" />
			<param index="0" name="key" type="PackedByteArray" />
			<param index="1" name="options" type="Dictionary" default="{ &quot;sync&quot;: false }" />
			<description>
				Deletes the key/value pair specified by [param key] from the database.
				[b]Note:[/b] [param options] can be given to customize behavior:
				- If [param sync] is [code]true[/code], then the operation is done synchronously, albeit at a slower speed.
			</description>
		</method>
		<method name="get">
			<return type="PackedByteArray" />
			<param index="0" name="key" type="PackedByteArray" />
			<param index="1" name="options" type="Dictionary" default="{ &quot;fill_cache&quot;: true, &quot;verify_checksums&quot;: false }" />
			<description>
				Gets the value from the given [param key].
				[b]Note:[/b] [param options] can be given to customize behavior:
				- If [param fill_cache] is [code]true[/code], then read data is cached in memory. You may want to disable this for bulk scans. 
				- If [param verify_checksums] is [code]true[/code], all data read from underlying storage will be verified against corresponding checksums.
			</description>
		</method>
		<method name="keys">
			<return type="Array" />
			<description>
				Returns an array with all the keys stored inside the database.
			</description>
		</method>
		<method name="open">
			<return type="bool" />
			<param index="0" name="path" type="String" />
			<param index="1" name="options" type="Dictionary" default="{ &quot;create_if_missing&quot;: false, &quot;error_if_exists&quot;: false, &quot;paranoid_checks&quot;: false }" />
			<description>
				Opens a database in the directory pointed by [param path].
				[b]Note:[/b] [param options] can be given to customize behavior:
				- If [param create_if_missing] is [code]true[/code], then the database is created if it does not exist at that directory. 
				- If [param error_if_exists] is [code]true[/code], then an error is thrown if the database already exists at that directory. 
				- If [param paranoid_checks] is [code]true[/code], then the the implementation will do aggressive checking of the data it is processing and will stop early if it detects any errors.
			</description>
		</method>
		<method name="print">
			<return type="void" />
			<param index="0" name="bytes" type="PackedByteArray" />
			<description>
				Attempts to print [param bytes] assuming they are an ASCII encoded string.
				[b]Note:[/b] Will skip [code]NULL[/code] characters, which are allowed in the middle of LevelDB keys and values.
			</description>
		</method>
		<method name="put">
			<return type="bool" />
			<param index="0" name="key" type="PackedByteArray" />
			<param index="1" name="value" type="PackedByteArray" />
			<param index="2" name="options" type="Dictionary" default="{ &quot;sync&quot;: false }" />
			<description>
				Puts the data inside [param value] into the database in a key/value pair specified by [param key].
				[b]Note:[/b] [param options] can be given to customize behavior:
				- If [param sync] is [code]true[/code], then the operation is done synchronously, albeit at a slower speed.
			</description>
		</method>
	</methods>
</class>
